{"version":3,"sources":["components/Question.tsx","services/fetchQuestions.ts","images/quiz.png","components/Main.tsx","App.tsx","index.tsx"],"names":["QuestionCard","question","answers","callback","userAnswer","ref","useRef","current","addRefs","el","includes","push","useEffect","forEach","TweenMax","to","opacity","y","easy","Power3","easeOut","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","value","disabled","onClick","fetchQuestions","a","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","Main","gsap","delay","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswer","score","setScore","over","setOver","quizOver","setQuizOver","startQuiz","alt","src","QuizLogo","TOTAL","length","style","Question","undefined","e","currentTarget","correct","prev","answerObject","nextQuestion","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA2DeA,EAtDuB,SAAC,GAKhC,IAJHC,EAIE,EAJFA,SACAC,EAGE,EAHFA,QACAC,EAEE,EAFFA,SACAC,EACE,EADFA,WAEMC,EAAMC,iBAA4B,IACxCD,EAAIE,QAAU,GACd,IAAMC,EAAU,SAACC,GACTA,IAAOJ,EAAIE,QAAQG,SAASD,IAC5BJ,EAAIE,QAAQI,KAAKF,IAezB,OAZAG,qBAAU,WACNP,EAAIE,QAAQM,SAAQ,SAACJ,GACjBK,IAASC,GACLN,EACA,GACA,CACIO,QAAS,EACTC,GAAI,GACJC,KAAMC,IAAOC,eAG1B,IAEC,sBAAKC,UAAU,OAAf,UACI,mBAAGA,UAAU,WAAWC,wBAAyB,CAAEC,OAAQtB,KAC3D,qBAAKoB,UAAU,qBAAf,SACKnB,EAAQsB,KAAI,SAAAC,GAAM,OACf,wBAEIpB,IAAKG,EACLa,UACMjB,GACc,OAAVA,QAAU,IAAVA,OAAA,EAAAA,EAAYsB,iBAAkBD,EAC1B,0BACU,OAAVrB,QAAU,IAAVA,OAAA,EAAAA,EAAYqB,UAAWA,EACnB,2BACA,iBACR,iBAEVE,MAAOF,EACPG,WAAYxB,EACZyB,QAAS1B,EAdb,SAgBI,sBAAMmB,wBAAyB,CAAEC,OAAQE,MAfpCA,Y,QC/BhBK,EAAc,uCAAG,4BAAAC,EAAA,4DACd,sDADc,SAEAC,MADd,uDADc,8BAEYC,OAFZ,cAEpBC,EAFoB,yBAGnBA,EAAKC,QAAQX,KAAI,SAACvB,GAAD,mBAAC,eAClBA,GADiB,IAEpBC,SARckC,EAQQ,GAAD,mBAAKnC,EAASoC,mBAAd,CAAiCpC,EAASqC,iBAPnE,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADrB,IAACL,MAGQ,2CAAH,qDCLZ,MAA0B,iCC8G1BM,EArGQ,WACrB,IAAIrC,EAAMC,iBAAO,MACjBM,qBAAU,WACR+B,IAAK5B,GAAG,SAAU,CAChBC,QAAS,EACTC,EAAG,GACH2B,MAAO,GACP1B,KAAMC,IAAOC,UAEfN,IAASC,GACPV,EAAIE,QACJ,GACA,CACES,QAAS,EACTC,GAAI,GACJC,KAAMC,IAAOC,YAEhB,IAjBwB,MAmBGyB,oBAAS,GAnBZ,mBAmBpBC,EAnBoB,KAmBXC,EAnBW,OAoBOF,mBAA0B,IApBjC,mBAoBpBG,EApBoB,KAoBTC,EApBS,OAqBCJ,mBAAS,GArBV,mBAqBpBK,EArBoB,KAqBZC,EArBY,OAsBSN,mBAAyB,IAtBlC,mBAsBpBzC,EAtBoB,KAsBRgD,EAtBQ,OAuBDP,mBAAS,GAvBR,mBAuBpBQ,EAvBoB,KAuBbC,EAvBa,OAwBHT,oBAAS,GAxBN,mBAwBpBU,EAxBoB,KAwBdC,EAxBc,OAyBKX,oBAAS,GAzBd,mBAyBpBY,EAzBoB,KAyBVC,EAzBU,KA2BrBC,EAAS,uCAAG,sBAAA5B,EAAA,6DAChBgB,GAAW,GACXO,EAAS,GACTI,GAAY,GACZF,GAAQ,GAJQ,KAKhBP,EALgB,SAKGnB,IALH,kCAMhBsB,EAAc,IACdD,EAAU,GACVJ,GAAW,GARK,4CAAH,qDAoCf,OACE,sBAAK1B,UAAU,OAAf,UACE,qBAAKhB,IAAKA,EAAKgB,UAAU,OAAOuC,IAAI,OAAOC,IAAKC,IAC/CL,GAAkCM,KAAtB3D,EAAW4D,OACtB,wBAAQ3C,UAAU,QAAQ4C,MAAOV,EAAO,CAAEvC,QAAS,GAAM,CAAEA,QAAS,GAAKa,QAAS8B,EAAlF,SACGJ,EAAO,8CAA0B,gDAElC,KACHA,GACC,8BACE,oBAAGlC,UAAU,QAAb,oBAA6BgC,OAGhCP,EAAU,qBAAKzB,UAAU,MAAMuC,IAAI,UAAUC,IAAI,2DAA8D,MAC9Gf,IAAYW,GACZ,cAACS,EAAD,CACEjE,SAAU+C,EAAUE,GAAQjD,SAC5BC,QAAS8C,EAAUE,GAAQhD,QAC3BE,WAAYA,EAAaA,EAAW8C,QAAUiB,EAC9ChE,SA5CY,SAACiE,GACnB,IAAKX,EAAU,CACb,IAAMhC,EAAS2C,EAAEC,cAAc1C,MACzB2C,EAAUtB,EAAUE,GAAQZ,iBAAmBb,EACjD6C,GAAShB,GAAS,SAAAiB,GAAI,OAAIA,EAAO,KACrC,IAAMC,EAA6B,CACjCvE,SAAU+C,EAAUE,GAAQjD,SAC5BwB,SACA6C,UACA5C,cAAesB,EAAUE,GAAQZ,gBAEnCc,GAAc,SAAAmB,GAAI,4BAAQA,GAAR,CAAcC,WAoC9Bf,GACCX,GACD1C,EAAW4D,SAAWd,EAAS,GAzFzB,KA0FNA,EAMU,KALV,wBACE7B,UAAU,eACVQ,QAtCa,WACnB,IAAM4C,EAAevB,EAAS,EAxDpB,KAyDNuB,GACFf,GAAY,GACZF,GAAQ,IAERL,GAAU,SAAAoB,GAAI,OAAIA,EAAO,MA8BvB,0BCtFOG,EATO,WAEpB,OACE,qBAAKrD,UAAU,MAAf,SACE,cAAC,EAAD,OCHNsD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4502ccbc.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport { Props } from '../services/types';\r\nimport { TweenMax, Power3 } from \"gsap\";\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n}) => {\r\n    const ref = useRef<HTMLButtonElement[]>([]);\r\n    ref.current = [];\r\n    const addRefs = (el: HTMLButtonElement) => {\r\n        if (el && !ref.current.includes(el)) {\r\n            ref.current.push(el);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        ref.current.forEach((el) => {\r\n            TweenMax.to(\r\n                el,\r\n                .8,\r\n                {\r\n                    opacity: 1,\r\n                    y: -20,\r\n                    easy: Power3.easeOut,\r\n                })\r\n        })\r\n    }, [])\r\n    return (\r\n        <div className=\"card\">\r\n            <p className=\"question\" dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div className=\"questionsContainer\">\r\n                {answers.map(answer => (\r\n                    <button\r\n                        key={answer}\r\n                        ref={addRefs}\r\n                        className={\r\n                            !!userAnswer\r\n                                ? userAnswer?.correctAnswer === answer\r\n                                    ? \"correct questionButton\"\r\n                                    : userAnswer?.answer === answer\r\n                                        ? \"incorrect questionButton\"\r\n                                        : \"questionButton\"\r\n                                : \"questionButton\"\r\n                        }\r\n                        value={answer}\r\n                        disabled={!!userAnswer}\r\n                        onClick={callback}\r\n                    >\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default QuestionCard","import { Question } from './types';\r\n\r\nconst shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\nexport const fetchQuestions = async () => {\r\n    const url = 'https://opentdb.com/api.php?amount=10&type=multiple';\r\n    const data = await (await fetch(url)).json();\r\n    return data.results.map((question: Question) => ({\r\n        ...question,\r\n        answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n    }))\r\n}","export default __webpack_public_path__ + \"static/media/quiz.87d65349.png\";","import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport QuestionCard from '../components/Question';\r\nimport { fetchQuestions } from '../services/fetchQuestions';\r\nimport { QuestionState, AnswerObject } from '../services/types';\r\nimport { gsap, TweenMax, Power3 } from \"gsap\";\r\nimport QuizLogo from '../images/quiz.png';\r\nconst TOTAL = 10;\r\n\r\nconst Main: React.FC = () => {\r\n  let ref = useRef(null);\r\n  useEffect(() => {\r\n    gsap.to('.start', {\r\n      opacity: 1,\r\n      y: 30,\r\n      delay: 0.5,\r\n      easy: Power3.easeOut,\r\n    })\r\n    TweenMax.to(\r\n      ref.current,\r\n      .8,\r\n      {\r\n        opacity: 1,\r\n        y: -20,\r\n        easy: Power3.easeOut,\r\n      })\r\n  }, [])\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswer, setUserAnswer] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [over, setOver] = useState(false);\r\n  const [quizOver, setQuizOver] = useState(true);\r\n\r\n  const startQuiz = async () => {\r\n    setLoading(true);\r\n    setScore(0);\r\n    setQuizOver(false);\r\n    setOver(false);\r\n    setQuestions(await fetchQuestions());\r\n    setUserAnswer([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  }\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!quizOver) {\r\n      const answer = e.currentTarget.value;\r\n      const correct = questions[number].correct_answer === answer;\r\n      if (correct) setScore(prev => prev + 1);\r\n      const answerObject: AnswerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswer(prev => [...prev, answerObject])\r\n    }\r\n  }\r\n\r\n  const nextQuestion = () => {\r\n    const nextQuestion = number + 1;\r\n    if (nextQuestion === TOTAL) {\r\n      setQuizOver(true);\r\n      setOver(true);\r\n    } else {\r\n      setNumber(prev => prev + 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <img ref={ref} className=\"logo\" alt=\"logo\" src={QuizLogo} />\r\n      {quizOver || userAnswer.length === TOTAL + 1 ? (\r\n        <button className=\"start\" style={over ? { opacity: 1 } : { opacity: 0 }} onClick={startQuiz}>\r\n          {over ? <span>Play Again</span> : <span>Start Quiz</span>}\r\n        </button>\r\n      ) : null}\r\n      {over && (\r\n        <div>\r\n          <p className=\"score\">Score: {score}</p>\r\n        </div>\r\n      )}\r\n      {loading ? <img className=\"img\" alt=\"loading\" src=\"https://www.fogelstad.org/core/dependencies/loader.gif\" /> : null}\r\n      {!loading && !quizOver && (\r\n        <QuestionCard\r\n          question={questions[number].question}\r\n          answers={questions[number].answers}\r\n          userAnswer={userAnswer ? userAnswer[number] : undefined}\r\n          callback={checkAnswer}\r\n        />\r\n      )}\r\n      {!quizOver &&\r\n        !loading &&\r\n        userAnswer.length === number + 1 &&\r\n        number !== TOTAL ?\r\n        <button\r\n          className=\"next opacity\"\r\n          onClick={nextQuestion}\r\n        >\r\n          Continue\r\n      </button> : null\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport Main from './components/Main';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}